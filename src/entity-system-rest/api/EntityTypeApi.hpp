/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#pragma once

#include <memory>
#include <crossguid/guid.hpp>
#include <string>
#include <restbed>

#include "spdlog/spdlog.h"

#include "../model/Attribute.hpp"
#include "../model/EntityInstance.hpp"
#include "../model/EntitySystemMessage.hpp"
#include "../model/EntityType.hpp"
#include "../model/RelationshipType.hpp"
#include "entity-system/managers/types/type-manager/EntityTypeManager.hpp"


using namespace inexor::entity_system::rest::model;
using namespace restbed;

namespace inexor {
namespace entity_system {
namespace rest {
namespace api {

class EntityTypeApiEntitiesTypesResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource;
class EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource;

class EntityTypeApi
{
	public:
		EntityTypeApi(
			std::shared_ptr<EntityTypeApiEntitiesTypesResource> spEntityTypeApiEntitiesTypesResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidResource> spEntityTypeApiEntitiesTypesEntity_type_uuidResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource> spEntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource> spEntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource> spEntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource> spEntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource> spEntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource,
			std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource> spEntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource
		);
		~EntityTypeApi();

		void createResources(std::shared_ptr<Service> service);

	private:
		std::shared_ptr<EntityTypeApiEntitiesTypesResource> spEntityTypeApiEntitiesTypesResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidResource> spEntityTypeApiEntitiesTypesEntity_type_uuidResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource> spEntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource> spEntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource> spEntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource> spEntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource> spEntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource;
		std::shared_ptr<EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource> spEntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource;

};


/// <summary>
/// Creates an entity type
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesResource();
		void POST_method_handler(const std::shared_ptr<Session> session);
		void DELETE_method_handler(const std::shared_ptr<Session> session);
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Creates (or updates if already exists) the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidResource();
		void POST_method_handler(const std::shared_ptr<Session> session);
		void DELETE_method_handler(const std::shared_ptr<Session> session);
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Creates (or updates if already exists) the value of the named attribute of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource();
		void POST_method_handler(const std::shared_ptr<Session> session);
		void DELETE_method_handler(const std::shared_ptr<Session> session);
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Deletes all entity instances of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource();
		void DELETE_method_handler(const std::shared_ptr<Session> session);
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Returns all incoming relationship types of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource();
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Returns all outgoing relationship types of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource();
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Returns all incoming and outgoing relationship types of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource();
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};

/// <summary>
/// Returns all attributes of the given entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource: public Resource
{
	public:
		EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource(
			std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager
		);
		virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource();
		void GET_method_handler(const std::shared_ptr<Session> session);
	private:
		std::shared_ptr<inexor::entity_system::EntityTypeManager> entity_type_manager;
};


}
}
}
}

