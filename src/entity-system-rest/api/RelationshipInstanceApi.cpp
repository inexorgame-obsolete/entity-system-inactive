/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "RelationshipInstanceApi.hpp"

#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>


namespace inexor {
namespace entity_system {
namespace rest {
namespace api {

using namespace inexor::entity_system::rest::model;
using namespace xg;
using namespace restbed;
using namespace std;

RelationshipInstanceApi::RelationshipInstanceApi() {}
RelationshipInstanceApi::~RelationshipInstanceApi() {}

void RelationshipInstanceApi::createResources(std::shared_ptr<inexor::entity_system::EntitySystem> entity_system, std::shared_ptr<Service> service) {
	std::shared_ptr<RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource> spRelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource = std::make_shared<RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource>();
	service->publish(spRelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource);
	
	std::shared_ptr<RelationshipInstanceApiRelationshipsInstancesResource> spRelationshipInstanceApiRelationshipsInstancesResource = std::make_shared<RelationshipInstanceApiRelationshipsInstancesResource>();
	service->publish(spRelationshipInstanceApiRelationshipsInstancesResource);
	
	std::shared_ptr<RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource> spRelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource = std::make_shared<RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource>();
	service->publish(spRelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource);
	
	std::shared_ptr<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource> spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource = std::make_shared<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource>();
	service->publish(spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource);
	
	std::shared_ptr<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource> spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource = std::make_shared<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource>();
	service->publish(spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource);
	
	std::shared_ptr<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource> spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource = std::make_shared<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource>();
	service->publish(spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource);
	
	std::shared_ptr<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource> spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource = std::make_shared<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource>();
	service->publish(spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource);
	
	std::shared_ptr<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource> spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource = std::make_shared<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource>();
	service->publish(spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource);
	
	std::shared_ptr<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource> spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource = std::make_shared<RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource>();
	service->publish(spRelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource);
	
}

RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource()
{
	this->set_path("/relationships/instances/{relationship_instance_uuid: .*}/");
	this->set_method_handler("POST",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("DELETE",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::~RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource()
{
}

void RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			// Getting the path params
			const std::string relationshipInstanceUuid = request->get_path_parameter("relationshipInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "The created relationship instance", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

		});
}

void RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string relationshipInstanceUuid = request->get_path_parameter("relationshipInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(200, "Success message", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}
void RelationshipInstanceApiRelationshipsInstancesRelationship_instance_uuidResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string relationshipInstanceUuid = request->get_path_parameter("relationshipInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<RelationshipInstance> response = NULL;
				session->close(200, "The relationship instance", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}


RelationshipInstanceApiRelationshipsInstancesResource::RelationshipInstanceApiRelationshipsInstancesResource()
{
	this->set_path("/relationships/instances/");
	this->set_method_handler("POST",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesResource::POST_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("DELETE",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiRelationshipsInstancesResource::~RelationshipInstanceApiRelationshipsInstancesResource()
{
}

void RelationshipInstanceApiRelationshipsInstancesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "The created relationship instance", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

		});
}

void RelationshipInstanceApiRelationshipsInstancesResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(200, "Success message", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}
void RelationshipInstanceApiRelationshipsInstancesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<RelationshipInstance> response = NULL;
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}


RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource()
{
	this->set_path("/relationships/instances/start/{start_entity_instance_uuid: .*}/end/{end_entity_instance_uuid: .*}/");
	this->set_method_handler("DELETE",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::DELETE_method_handler, this,
			std::placeholders::_1));
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::~RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource()
{
}

void RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string startEntityInstanceUuid = request->get_path_parameter("startEntityInstanceUuid", "");
			const std::string endEntityInstanceUuid = request->get_path_parameter("endEntityInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Success message", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}

void RelationshipInstanceApiRelationshipsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string startEntityInstanceUuid = request->get_path_parameter("startEntityInstanceUuid", "");
			const std::string endEntityInstanceUuid = request->get_path_parameter("endEntityInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<RelationshipInstance> response = NULL;
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}


RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource::RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relationships/{relationship_type_uuid: .*}/");
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource::~RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource()
{
}

void RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			const std::string relationshipTypeUuid = request->get_path_parameter("relationshipTypeUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}



RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource::RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relationships/");
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource::~RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource()
{
}

void RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}



RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource::RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relationships/{relationship_type_uuid: .*}/incoming/");
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource::~RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource()
{
}

void RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidIncomingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			const std::string relationshipTypeUuid = request->get_path_parameter("relationshipTypeUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}



RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource::RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relationships/incoming/");
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource::~RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource()
{
}

void RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsIncomingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}



RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource::RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relationships/{relationship_type_uuid: .*}/outgoing/");
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource::~RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource()
{
}

void RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsRelationship_type_uuidOutgoingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			const std::string relationshipTypeUuid = request->get_path_parameter("relationshipTypeUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}



RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource::RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relationships/outgoing/");
	this->set_method_handler("GET",
		std::bind(&RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource::GET_method_handler, this,
			std::placeholders::_1));
}

RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource::~RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource()
{
}

void RelationshipInstanceApiEntitiesInstancesEntity_instance_uuidRelationshipsOutgoingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Array of relationship instances", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}




}
}
}
}

