/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "EntityInstanceApi.hpp"

#include <crossguid/guid.hpp>

#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>


namespace inexor {
namespace entity_system {
namespace rest {
namespace api {

using namespace inexor::entity_system::rest::model;
using namespace xg;
using namespace restbed;
using namespace std;

EntityInstanceApi::EntityInstanceApi(
	std::shared_ptr<EntityInstanceApiEntitiesInstancesResource> spEntityInstanceApiEntitiesInstancesResource,
	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidResource,
	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource,
	std::shared_ptr<EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource> spEntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource,
	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource,
	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource,
	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource
//	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource,
//	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource,
//	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource,
//	std::shared_ptr<EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource> spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource
)
{
	this->spEntityInstanceApiEntitiesInstancesResource = spEntityInstanceApiEntitiesInstancesResource;
	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidResource;
	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource;
	this->spEntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource = spEntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource;
	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource;
	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource;
	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource;
//	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource;
//	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource;
//	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource;
//	this->spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource = spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource;
}

EntityInstanceApi::~EntityInstanceApi() {}

void EntityInstanceApi::publish_resources(std::shared_ptr<Service> service) {
	service->publish(spEntityInstanceApiEntitiesInstancesResource);
	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidResource);
	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource);
	service->publish(spEntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource);
	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource);
	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource);
	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource);
//	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource);
//	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource);
//	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource);
//	service->publish(spEntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource);
}

EntityInstanceApiEntitiesInstancesResource::EntityInstanceApiEntitiesInstancesResource()
{
	this->set_path("/entities/instances/");
	this->set_method_handler("POST", std::bind(&EntityInstanceApiEntitiesInstancesResource::POST_method_handler, this, std::placeholders::_1));
	this->set_method_handler("DELETE", std::bind(&EntityInstanceApiEntitiesInstancesResource::DELETE_method_handler, this, std::placeholders::_1));
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesResource::~EntityInstanceApiEntitiesInstancesResource()
{
}

void EntityInstanceApiEntitiesInstancesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "The created entity instance", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

		});
}

void EntityInstanceApiEntitiesInstancesResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(200, "Success message", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}
void EntityInstanceApiEntitiesInstancesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		std::shared_ptr<EntityInstance> response = NULL;
		session->close(200, "Array of entity instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}


EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/");
	this->set_method_handler("POST", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::POST_method_handler, this, std::placeholders::_1));
	this->set_method_handler("DELETE", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::DELETE_method_handler, this, std::placeholders::_1));
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "The created or updated entity instance", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

		});
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(200, "Success message", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				std::shared_ptr<EntitySystemMessage> response = NULL;
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

}
void EntityInstanceApiEntitiesInstancesEntity_instance_uuidResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		std::shared_ptr<EntityInstance> response = NULL;
		session->close(200, "An entity instance", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}


EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/attributes/{name: .*}/");
	this->set_method_handler("POST", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::POST_method_handler, this, std::placeholders::_1));
	this->set_method_handler("DELETE", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::DELETE_method_handler, this, std::placeholders::_1));
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			// Getting the path params
			const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
			const std::string name = request->get_path_parameter("name", "");
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "The created or updated attribute", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "unexpected error", { {"Connection", "close"} });
				return;
			}

		});
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
	const std::string name = request->get_path_parameter("name", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(200, "Success message", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}
void EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesNameResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
	const std::string name = request->get_path_parameter("name", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		std::shared_ptr<Attribute> response = NULL;
		session->close(200, "The attribute", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}


EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource()
{
	this->set_path("/relations/instances/start/{start_entity_instance_uuid: .*}/end/{end_entity_instance_uuid: .*}/");
	this->set_method_handler("DELETE", std::bind(&EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::DELETE_method_handler, this, std::placeholders::_1));
	this->set_method_handler("GET", std::bind(&EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::~EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource()
{
}

void EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::DELETE_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string startEntityInstanceUuid = request->get_path_parameter("startEntityInstanceUuid", "");
	const std::string endEntityInstanceUuid = request->get_path_parameter("endEntityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Success message", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}

void EntityInstanceApiRelationsInstancesStartStart_entity_instance_uuidEndEnd_entity_instance_uuidResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();

	// Getting the path params
	const std::string startEntityInstanceUuid = request->get_path_parameter("startEntityInstanceUuid", "");
	const std::string endEntityInstanceUuid = request->get_path_parameter("endEntityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		std::shared_ptr<RelationInstance> response = NULL;
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		std::shared_ptr<EntitySystemMessage> response = NULL;
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}


EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relations/{relation_type_uuid: .*}/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
	const std::string relationTypeUuid = request->get_path_parameter("relationTypeUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}



EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relations/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}



EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/attributes/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidAttributesResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of attributes", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}



EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relations/{relation_type_uuid: .*}/incoming/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidIncomingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
	const std::string relationTypeUuid = request->get_path_parameter("relationTypeUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}



EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relations/incoming/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsIncomingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}



EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relations/{relation_type_uuid: .*}/outgoing/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsRelation_type_uuidOutgoingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");
	const std::string relationTypeUuid = request->get_path_parameter("relationTypeUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}



EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource::EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource()
{
	this->set_path("/entities/instances/{entity_instance_uuid: .*}/relations/outgoing/");
	this->set_method_handler("GET", std::bind(&EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource::GET_method_handler, this, std::placeholders::_1));
}

EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource::~EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource()
{
}

void EntityInstanceApiEntitiesInstancesEntity_instance_uuidRelationsOutgoingResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
	// Getting the path params
	const std::string entityInstanceUuid = request->get_path_parameter("entityInstanceUuid", "");

	// Change the value of this variable to the appropriate response before sending the response
	int status_code = 200;

	/**
	 * Process the received information here
	 */

	if (status_code == 200) {
		session->close(200, "Array of relation instances", { {"Connection", "close"} });
		return;
	}
	if (status_code == 0) {
		session->close(0, "unexpected error", { {"Connection", "close"} });
		return;
	}

}




}
}
}
}

