/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EntitySystem.hpp"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace inexor {
namespace entity_system {
namespace rest {
namespace model {

EntitySystem::EntitySystem()
{
    
}

EntitySystem::~EntitySystem()
{
}

std::string EntitySystem::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void EntitySystem::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::vector<std::shared_ptr<EntityType>> EntitySystem::getEntityTypes() const
{
    return m_Entity_types;
}
void EntitySystem::setEntityTypes(std::vector<std::shared_ptr<EntityType>> value)
{
    m_Entity_types = value;
}
std::vector<std::shared_ptr<RelationshipType>> EntitySystem::getRelationshipTypes() const
{
    return m_Relationship_types;
}
void EntitySystem::setRelationshipTypes(std::vector<std::shared_ptr<RelationshipType>> value)
{
    m_Relationship_types = value;
}
std::vector<std::shared_ptr<EntityInstance>> EntitySystem::getEntityInstances() const
{
    return m_Entity_instances;
}
void EntitySystem::setEntityInstances(std::vector<std::shared_ptr<EntityInstance>> value)
{
    m_Entity_instances = value;
}
std::vector<std::shared_ptr<RelationshipInstance>> EntitySystem::getRelationshipInstances() const
{
    return m_Relationship_instances;
}
void EntitySystem::setRelationshipInstances(std::vector<std::shared_ptr<RelationshipInstance>> value)
{
    m_Relationship_instances = value;
}

}
}
}
}

